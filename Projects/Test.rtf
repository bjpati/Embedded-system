{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red127\green0\blue85;\red42\green0\blue255;
\red0\green80\blue50;\red0\green0\blue192;\red100\green40\blue128;}
{\*\expandedcolortbl;;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c16471\c0\c100000;
\csgenericrgb\c0\c31373\c19608;\csgenericrgb\c0\c0\c75294;\csgenericrgb\c39216\c15686\c50196;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 /*\cf0 \
\cf2  * Test.c\cf0 \
\cf2  *\cf0 \
\cf2  *  Created on: \ul Jan\ulnone  2, 2022\cf0 \
\cf2  *      Author: \ul basharpati\cf0 \ulnone \
\cf2  */\cf0 \
\

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "Test.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "LCD.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "gpio.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "adc.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "rtc.h"\cf0 \
\

\f1\b \cf3 char
\f0\b0 \cf0  ADCString[20];\
\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b Test_program
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\
\{\
	LCDClearTest();\
	LCDInitializeTest();\
	LCDSetROMTest();\
	LCDClear();\
	backlightSetWhiteTest();\
	WriteCharTest();\
	HAL_Delay(1000);\
	LCDClear();\
	WriteStringTest();\
	HAL_Delay(1000);\
	LCDClear();\
	LCDSetPositionTest();\
	LCDClear();\
	SetBacklightTest();\
	getADCValueTest();\
	LCDClear();\
	settingTimeTest();\
	gettingTimeTest();\
\
\}\
\
\cf2 /**\cf0 \
\cf2  * @brief test_lcd_clear a test function to run lcd_clear.\cf0 \
\cf2  * Test is seen as successful if the display is cleared with information and "test_lcd_clear succeed"\cf0 \
\cf2  * is printed via serial communication.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b LCDClearTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	LCDClear();\
	\cf5 uint8_t\cf0 * LCDClearTest = \cf4 "LCDClearTest succeed\\n\\r"\cf0 ;\
	Transmission(LCDClearTest);\
\}\
\
\
\cf2 /**\cf0 \
\cf2  * @brief test_display_initialize a test to initialize the display.\cf0 \
\cf2  * Test is seen as successful if "test_lcd_initialize succeed" is printed via\cf0 \
\cf2  * serial communication.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b LCDInitializeTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	LCDInitialize();\
	\cf5 uint8_t\cf0 * LCDInitializeTest = \cf4 "LCDInitializeTest succeed\\n\\r"\cf0 ;\
	Transmission(LCDInitializeTest);\
\}\
\
\cf2 /**\cf0 \
\cf2  * @brief test_lcd_rom test to set the LCD ROM with function call to lcd_setROM.\cf0 \
\cf2  * Test is seen as successful if "test_lcd_setROM succeed" is printed via\cf0 \
\cf2  * serial communication.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b LCDSetROMTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	LCDSetROM();\
	\cf5 uint8_t\cf0 * LCDRomTest = \cf4 "LCDRomTest succeed\\n\\r"\cf0 ;\
	Transmission(LCDRomTest);\
\}\
\
\cf2 /**\cf0 \
\cf2  * @brief test_backlight_set_white a test function to turn on the white \ul backlight\ulnone  on the display. Calls\cf0 \
\cf2  * function backlight_set_white. Test is seen as successful if display has white \ul backlight\ulnone .\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b backlightSetWhiteTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	backlightSetWhite();\
\}\
\
\cf2 /**\cf0 \
\cf2  * @brief test_write_char a test to write a stream of \ul hardcoded\ulnone  instructions of chars to the display.\cf0 \
\cf2  * Test is seen as successful if chars appear on display and "test_write_char succeed" is printed via\cf0 \
\cf2  * serial communication.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  *  @return void\cf0 \
\cf2 */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b WriteCharTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	LCDSendInstruction(0x80);\
	LCDSendData(0x77);\
	LCDSendData(0x61);\
	LCDSendData(0x64);\
	LCDSendData(0x64);\
	LCDSendData(0x61);\
	LCDSendData(0x70);\
	LCDSendData(0x3F);\
	\cf5 uint8_t\cf0 * WriteCharTest = \cf4 "WriteCharTest succeed\\n\\r"\cf0 ;\
	Transmission(WriteCharTest);\
\}\
\
\cf2 /**\cf0 \
\cf2  * @brief test_write_string a test function that send a string to lcd_write_string function\cf0 \
\cf2  * and the string should be printed on the display.\cf0 \
\cf2  * Test is seen as successful if string appear on display and "test_write_string succeed" is printed via\cf0 \
\cf2  * serial communication.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b WriteStringTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	LCDSetPosition(LINE1);\
	LCDWriteString(\cf4 "HELLO"\cf0 );\
	HAL_Delay(2000);\
	LCDSetPosition(LINE2);\
	LCDWriteString(\cf4 "I CAN"\cf0 );\
	HAL_Delay(2000);\
	LCDSetPosition(LINE3);\
	LCDWriteString(\cf4 "WRITE"\cf0 );\
	HAL_Delay(2000);\
	LCDSetPosition(LINE4);\
	LCDWriteString(\cf4 "ON DESPLAY"\cf0 );\
	HAL_Delay(3000);\
\
	\cf5 uint8_t\cf0 * WriteStringTest = \cf4 "WriteStringTest succeed\\n\\r"\cf0 ;\
	Transmission(WriteStringTest);\
\}\
\
\cf2 /**\cf0 \
\cf2  * @brief test_lcd_set_position prints string "Line x", where x is the number of the line\cf0 \
\cf2  * it is going to be printed on. Test is seen as successful if the display show 4 lines with text and\cf0 \
\cf2  * "test_lcd_clear succeed" is printed via serial communication.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b LCDSetPositionTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	LCDSetPosition(LINE1);\
	LCDWriteString(\cf4 "First.Line"\cf0 );\
	HAL_Delay(1000);\
	LCDSetPosition(LINE2);\
	LCDWriteString(\cf4 "Second.Line"\cf0 );\
	HAL_Delay(1000);\
	LCDSetPosition(LINE3);\
	LCDWriteString(\cf4 "Third.Line"\cf0 );\
	HAL_Delay(1000);\
	LCDSetPosition(LINE4);\
	LCDWriteString(\cf4 "Fourth.Line"\cf0 );\
	HAL_Delay(3000);\
	\cf5 uint8_t\cf0 * LCDSetPositionTest = \cf4 "LCDSetPositionTest succeed\\n\\r"\cf0 ;\
	Transmission(LCDSetPositionTest);\
\}\
\
\
\cf2 /**\cf0 \
\cf2  * @brief test_set_backlight a test function that turns white and green display color off, and turns on the red\cf0 \
\cf2  * color to be able to set the \ul backlight\ulnone  strength via PWM. Function backlight_set_brightnes() is called in\cf0 \
\cf2  * a while loop, to be able to test the PWM on the \ul microcontroller\ulnone . backlight_set_brightnes enables the\cf0 \
\cf2  * \ul backlight\ulnone  strength to be to be modified via timer PWM.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b SetBacklightTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	
\f1\b \cf3 int
\f0\b0 \cf0  i = 0;\
	HAL_GPIO_WritePin(GPIOC, Disp_White_Pin, 
\f2\i \cf6 GPIO_PIN_RESET
\f0\i0 \cf0 );\
	HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin, 
\f2\i \cf6 GPIO_PIN_RESET
\f0\i0 \cf0 );\
\
	LCDWriteString(\cf4 "PWM"\cf0 );\
	LCDSetPosition(LINE2);\
	LCDWriteString(\cf4 "is succeed"\cf0 );\
\
	
\f1\b \cf3 while
\f0\b0 \cf0 (i < 1000000)\{\
		backlightSetBrightnes();\
		i++;\
	\}\
\}\
\
\
\cf2 /**\cf0 \
\cf2  * @brief test_get_adc_value calls function get_adc_value that starts \ul adc\ulnone  and read the analog signal and returns\cf0 \
\cf2  * a \ul int\ulnone  with the value. The value is then printed on the display. Test is seen as successful if the value\cf0 \
\cf2  * and "test_write_string succeed" is printed via serial communication.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b getADCValueTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	LCDInitialize();\
	LCDClear();\
	LCDSetPosition(LINE1);\
	\cf5 uint32_t\cf0  value = getADCValue();\
	
\f1\b \cf7 sprintf
\f0\b0 \cf0 ((
\f1\b \cf3 char
\f0\b0 \cf0  *)ADCString, \cf4 "%d"\cf0  , value);\
	LCDWriteString(\cf4 "ADC_Value"\cf0 );\
	LCDSetPosition(LINE2);\
	LCDWriteString(ADCString);\
	HAL_Delay(1000);\
	\cf5 uint8_t\cf0 * getADCValueTest = \cf4 "getADCValueTest succeed\\n\\r"\cf0 ;\
	Transmission(getADCValueTest);\
\}\
\
\cf2 /**\cf0 \
\cf2  * @brief test_set_time calls function set_time() that asks the user for a input to set the RTC.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b settingTimeTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	settingTime();\
\}\
\
\
\cf2 /**\cf0 \
\cf2  * @brief test_get_time calls function get_time() that displays the time on the display for 10 seconds.\cf0 \
\cf2  * @\ul param\ulnone  void\cf0 \
\cf2  * @return void\cf0 \
\cf2  */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b gettingTimeTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\{\
	
\f1\b \cf3 int
\f0\b0 \cf0  i = 0;\
	
\f1\b \cf3 while
\f0\b0 \cf0 (i < 2000)\{\
		gettingTime();\
		i++;\
	\}\
\}\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 /*\cf0 \
\cf2  * Test.h\cf0 \
\cf2  *\cf0 \
\cf2  *  Created on: \ul Jan\ulnone  2, 2022\cf0 \
\cf2  *      Author: \ul basharpati\cf0 \ulnone \
\cf2  */\cf0 \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf3 #ifndef
\f0\b0 \cf0  INC_TEST_H_\

\f1\b \cf3 #define
\f0\b0 \cf0  INC_TEST_H_\
\

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "adc.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "LCD.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "usart.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "rtc.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <stdlib.h>\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <stdio.h>\cf0 \
\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b Test_program
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b LCDClearTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b LCDInitializeTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b LCDSetROMTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b backlightSetWhiteTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b WriteCharTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b WriteStringTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b LCDSetPositionTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b SetBacklightTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b getADCValueTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b settingTimeTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b gettingTimeTest
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\
\
\

\f1\b \cf3 #endif
\f0\b0 \cf0  \cf2 /* INC_TEST_H_ */\cf0 \
}